%%%%%%%% Sample LaTeX input for Complex Systems %%%%%%%%%%% 
% Revision 4, Jun 27, 2018
%
% This is a LaTeX input file  
% Text following % on a particular line is treated as a comment, and 
% ignored by LaTeX.  
% You do not need to type any text that follows a % 
% 
\documentclass{article}

\usepackage{graphicx,hyperref}
\usepackage{amssymb,ComplexSystems}
\usepackage{tikz}
\usepackage{scalefnt}
\usetikzlibrary{automata, positioning, arrows}
\usepackage{underscore}
\graphicspath{ {./images/} }

% complex-systems.sty is the macro package for Complex Systems.
% It is available at
% http://www.complex-systems.com/samples/complex-systems.sty
% epsf.sty is the preferred graphics import method

\begin{document}

\title{Relazione di Progetto - Reti Logiche% 
% Use \\ to indicate line breaks in titles longer than about 
% 55 characters. 
%
}

\author{\authname{Elia Maggioni}\\[2pt] 
% Use \\[2pt] to end the line and add space between author name and affiliation. 
\authadd{Ingegneria Informatica, Scuola 3I, Polimi}\\
\authadd{C.P. 10610008}\\
\and
% For extra space, precede the second set of authors with \and.
\authname{Marco Fasanella}\\
\authadd{Ingegneria Informatica, Scuola 3I, Polimi}\\
\authadd{C.P. 10617541}\\
% Do not use a ``.'' at the end of any line in the address. 
}

% The following specifies the running headings 
%
% Each running heading should be less than about 50 characters long. 
% If necessary, give a shortened version of the title. 
%
% Use initials for first and second names. If all author names do not fit, truncate the 
% list and end with ``et al.''.
\markboth{Progetto di Reti Logiche} 
{Relazione di Progetto} 

\maketitle
% End title section

\begin{abstract}
Questa relazione descrive il codice VHDL sintetizzato per l'equalizzazione di un'immagine in bianco e nero su piattaforma FPGA. L'implementazione si basa sulla espansione della gamma cromatica utilizzata al fine di occupare tutta quella rappresentabile. Lo sviluppo ha incluso la definizione di test bench per testare la correttezza e l'affidabilità del risultato prodotto. 
\end{abstract}

% The text of the paper follows. All of the text should be in the same file. 
% Use separate files for large tabular material and graphics.

\section{Introduzione}
\label{intro}
% \label is a hyperlink target for cross-referencing to this section using \ref{intro} (optional).
Il circuito descritto si occupa di leggere e rielaborare i dati da RAM producendo un'immagine con nitidezza più alta e quindi più leggibile. 

Quando il segnale start è fornito al circuito, viene attivata la prima macchina a stati ed in base al bias tra la saturazione dei pixel e l'offset, ovvero il valore minimo di saturazione, viene restituita nei valori di memoria immediatamente successivi un'immagine che meglio ricopre la gamma di colore rappresentabile.
\begin{figure}[h]
\centering
\includegraphics[width=0.9\textwidth]{Example.png}
\caption{Esempio di Equalizzazione (con algoritmo completo)}
\end{figure}
Quando la elaborazione è terminata, viene restituito un segnale di done ed il circuito è pronto per una nuova immagine a partire dall'indirizzo 0. L'algoritmo usato nel progetto è solo una semplificazione di quello che realmente sarebbe possibile con questa tecnica. 
\newline
Questo per sottolineare il potenziale dell' equalizzazione dell'istogramma e di come riesca a migliorare in modo veramente apprezzabile la qualità di una immagine digitale.
\newline
\break
Nel circuito è stato scelto di dividere in 3 la computazione con moduli in cascata.
\subsection{Specifica}
 \begin{figure}[h]
\centering
\includegraphics[width=0.8\textwidth]{segnali.png}
\caption{Interfaccia del Componente)}
\end{figure}
I segnali da considerare sono i seguenti:
\newline

\begin{itemize}
\item i_clk è il segnale di CLOCK in ingresso generato dal TestBench;
\item i_rst è il segnale di RESET che inizializza la macchina pronta per ricevere il primo;
\item i_start è il segnale di START generato da TestBench;
\item i_data è il segnale (vettore) che arriva dalla memoria;
\item o_address è il segnale (vettore) di uscita che manda l’indirizzo alla memoria;
\item o_done è il segnale di uscita che comunica la fine dell’elaborazione e il dato di uscita scritto in memoria;
\item o_en è il segnale di ENABLE;
\item o_we è il segnale di WRITE ENABLE;
\item o_data è il segnale (vettore) di uscita dal componente verso la memoria;
\end{itemize}
Mentre i valori da calcolare durante l'elaborazione saranno:
\newline
\begin{itemize}
\item DELTA_VALUE = MAX_PIXEL_VALUE – MIN_PIXEL_VALUE
\item SHIFT_LEVEL = (8 – FLOOR(LOG2(DELTA_VALUE +1))))
\item TEMP_PIXEL = (CURRENT_PIXEL_VALUE - MIN_PIXEL_VALUE) \(<<\) SHIFT_LEVEL
\item NEW_PIXEL_VALUE = MIN( 255 , TEMP_PIXEL)
\end{itemize}

Ogni byte corrisponde ad un pixel dell’immagine, che sarà quindi formata in modo sequenziale riga per riga. Bisognerà quindi leggere i valori e rielaborarli, per poi scriverli in memoria (a partire dall’indirizzo 2 e in byte contigui).
\subsection{Esempio} 
Di seguito vengono riportati degli esempi per comprendere meglio come è strutturato.
\begin{figure}[h]
\centering
\includegraphics[width=0.32\textwidth]{BeforeEq.png}
\caption{Esempio di Pixel da Equalizzare}
\end{figure}
L'equalizzazione incrementa il contrasto globale delle immagini, specialmente quando i dati usabili dell'immagine sono rappresentati da valori di intensità molto vicini. Le intensità vengono perciò distribuite sull'istogramma, permettendo alle aree a basso contrasto locale di ottenere un alto contrasto.\newline
\begin{figure}[h]
\centering
\includegraphics[width=0.33\textwidth]{AfterEq.png}
\caption{Esempio di Pixel Equalizzati}
\end{figure}


\break
\section{Architettura}
La scelta architetturale ricade sull'utilizzo di 3 moduli, descritti ognuno da una propria FSM, attraverso segnali in cascata per l'avvio e la terminazione delle varie parti. Si avranno quindi i segnali start2,start3,done2, e done3 che avranno come scopo la comunicazione fra i vari moduli e i loro processi.
 \begin{enumerate} 
  \item \textbf{Modulo 1} 
  
  Il primo modulo si occupa dell'inizio della computazione, della lettura e ricerca di massimo, minimo, e delta. Inoltre attende la discesa del segnale start in modo da abbassare done e mettersi in attesa di una nuova immagine. La macchina a stati di riferimento (FSM1) è composta dai seguenti stati:
  \begin{itemize}
  \item F1S0 \((Ready)\)
  
 Stato iniziale che attende il segnale di start. Si entra in questo stato per azzerare i registri e prepararsi a processare l'immagine.
  
    \item F1S1,F1S2,F1S1b,F1S2b \((Operands)\)
  
 Questi stati si occupano della lettura di OP1 e OP2 (numero righe e colonne) attraverso il processo MULT. In F1S2b un controllo si accerterà che OP1 non sia nullo, altrimenti si passerà allo stato di terminazione e reset dei valori per una nuova lettura.
  \item F1S3,F1S3b \((Multiply)\)
  
 A questo punto viene calcolato M (cioè \(OP1*OP2\)) facendo rimbalzare questi due stati attraverso il segnale o-m. Il calcolo avviene per somme successive fino a quando OP2 sarà zero. 
  \item F1S4,F1S4a,F1S5 \((Pixels)\)
  
  Attraverso i processi ADDRHandler e MINeMAX, verrà incrementato REGAddr (registro dell'indirizzo di memoria) e controllato Pixel (registro che salva ogni current pixel). Il segnale f1 detta il passaggio fra questi stati attraverso la condizione \(REGAddr > M + 2 \). Il calcolo del delta invece, avviene ad ogni nuovo assegnamento del Massimo o del Minimo.
  
  \item F1S6,F1S7 \((Finalize)\)
  
  Una volta terminato il proprio compito, nello stato F1S6 verrà alzato il segnale start2 per far partire il secondo modulo e successivamente, lo stato F1S7 si metterà quindi in attesa del segnale done2 per terminare l'elaborazione e reset dei valori.
  \item F1S8,F1S9 \((Reset)\)
  
  A questo punto, una volta ricevuto il segnale done2, lo stato F1S8 alzerà done ed endof (segnale generale di imminente terminazione e reset dei valori), e aspetterà che si abbassi start, per poi passare a F1S9 che farà riscendere i due precedenti segnali. Si torna quindi a F1S0 in attesa di una nuova immagine.
\end{itemize}
\begin {center}  
	\begin{tikzpicture}
	[->,align=center,node distance=1cm,]
    \node[state,initial,initial where=left, initial text=$rst$] (S0) {$S0$};
    \node[state, right of=S0] (S1) {$S1$};
    \node[state, below of=S1] (S2) {$S2$};
    \node[state, below of=S2] (S1b) {$S1_b$};
    \node[state, below of=S1b] (S2b) {$S2_b$};
      \node[state, right of=S1] (S3b) {$S3_b$};
      \node[state, below of=S3b] (S3) {$S3$};
       \node[state, right of=S3b] (S5) {$S5$};
      \node[state, below of=S5] (S4a) {$S4_a$};
       \node[state, below of=S4a] (S4) {$S4$};
      \node[state, right of=S5] (S6) {$S6$};
      \node[state, right of=S6] (S7) {$S7$};
      \node[state, right of=S7] (S8) {$S8$};
      \node[state, right of=S8] (S9) {$S9$};
       \draw   (S0) edge[bend right,below] node{$start$} (S1)
       (S0) edge[loop below] node{} (S1)
            (S1) edge[ below] node{} (S2)
            (S2) edge[ below] node{} (S1b)
            (S1b) edge[ below] node{} (S2b)
            (S2b) edge[ bend right ,right] node{\tiny $OP1==0$} (S8)
            (S2b) edge[ bend right] node{} (S3)
            (S3) edge[ bend left, above] node{} (S3b)
            (S3) edge[ bend right,below] node{\tiny OP2==0} (S4)
            (S3b) edge[ bend left] node{} (S3)
            (S4) edge[ below] node{} (S4a)
            (S4a) edge[ below] node{} (S5)
            (S5) edge[ bend left] node{} (S4)
            (S5) edge[ bend left,above] node{$f1$} (S6)
            (S6) edge[ right] node{} (S7)
              (S7) edge[ loop below] node{} (S7)
                (S8) edge[ loop below] node{$start$} (S8)
                (S9) edge[ loop below] node{} (S9)
            (S7) edge[ bend left,above] node{$done2$} (S8)
            (S8) edge[ bend right,below] node{} (S9)
            (S9) edge[bend right,above] node{$!start$} (S0);
\end{tikzpicture}
\end{center}  
  
    \item \textbf{Modulo 2}
		
		Il modulo due svolge il calcolo dello shift level noto il data value e lo rende disponibile per l'utilizzo al modulo tre. Una volta completato il calcolo, alza il segnale start3 per fare partire la FSM3 ed attende il done3 prima di terminare dando il done2 al modulo uno. Di seguito la descrizione della FSM2 che ha quasi solo una funzione di timing dei registri:
			\begin{itemize}
				\item F2S0 \emph{(Ready)}
				
				Attende l'inizio dell'esecuzione del programma che avviene tramite l'innalzamento del segnale start2
				
				\item F2S1 \emph{(Get\_Delta)}
				
				Carica il valore di delta nel registro S2R1
				
				\item F2S2,F2S3,F2S4 \emph{(LUT)}
				
				Attende la propagazione del segnale nel datapath e carica il valore in uscita dalla LUT in S2R2
				
				\item F2S5 \emph{(Start3)}
				
				Avvia il modulo tre alzando il segnale start3
				
				\item F2S6 \emph{(WaitDone3)}
				
				Attende in questo stato finché done3 non viene alzato dal modulo tre
				\item F2S7 \emph{(Finalize)}
				
				Alza il done2 per segnalare al modulo due l'avvenuta terminazione dell'elaborazione.
				
				
			\end{itemize}
			\begin{tikzpicture}
[->,align=center,node distance=1.2cm]
\node[state, initial, initial text=i\_start] (s0) {$S0$};
\node[state, right of=s0, node distance=1.7cm] (s1) {$S1$};
\node[state, right of=s1] (s2) {$S2$};
\node[state, right of=s2] (s3) {$S3$};
\node[state, right of=s3] (s4) {$S4$};
\node[state, right of=s4] (s5) {$S5$};
\node[state, right of=s5] (s6) {$S6$};
\node[state, right of=s5] (s6) {$S6$};
\node[state, right of=s6,node distance=1.7cm] (s7) {$S7$};
\draw   
	(s0) edge[loop above] node{!start2} (s0)
	(s0) edge[above] node{start2} (s1)
	(s1) edge[above, dotted, green] node{} (s2)
	(s2) edge[above] node{} (s3)
	(s3) edge[above] node{} (s4)
	(s4) edge[above] node{} (s5)
	(s5) edge[above] node{} (s6)
	(s6) edge[above] node{done3} (s7)
	(s6) edge[loop above] node{!done3} (s6)
	(s7) edge[bend left, above] node{} (s0);
\end{tikzpicture}

    \item\textbf{Modulo 3} 
		
		Il modulo tre è dove avviene la parte più delicata dell'elaborazione, in particolare a questa parte è delegata la lettura da memoria del valore del pixel corrente, il calcolo sequenziale per ogni pixel del nuovo valore e la riscrittura in memoria.
		
		\begin{itemize}
		
		\item F3S0 \emph{(Ready)}
		
		Stato di attesa della macchina, passa a \emph{F3S0b} quando start3 è portato a 1
		
		\item F3S0b, F3S0c \emph{(MemLoad)}
		
		In questi due stati viene prelevato da memoria il valore corrente del pixel ed assegnato al registro \emph{F3R3} che simboleggia il \emph{CurrPixel} value. La gestione della memoria viene effettuata tramite i flag \emph{o\_f3addr\_read \emph{e} o\_f3addr\_write} in un processo separato. Viene quindi assegnato il valore di ritorno \emph{i\_data}.
		
		\item F3S1 \emph{(Get\_Calculated\_Values)}
		
		Avviene ora il prelievo dei segnali provenienti dai moduli uno e due e il caricamento degli stessi nei registri \emph{F3R1}, \emph{F3R2} e \emph{F3R4}, rispettivamente \textit{shift\_level, min pixel value \emph{e} max address}.
		
		\item F3S2, F3S3 \emph{(Zeroing)}
		
		In questi stati avviene il calcolo di \(CurrPixel - minV\) e viene propagato tramite il segnale \emph{o\_f3sub} che poi viene caricato in \emph{F3R5}
		
		\item F3S4 \emph{(Shift)}
		
		Da \emph{shift\_level} e \emph{F3R5} viene calcolato il valore di \emph{o\_f3shift}, vettore di 16 bit per evitare il possibile overflow
		
		\item F3S5, F3S6 \emph{(Overflow\_Check)}
		
		Un mutex viene inserito per portare \emph{shift\_level} da 16 bit a 8, nel caso in cui sia minore di 255 gli 8 bit più significativi vengono scartati, altrimenti viene assegnato il valore massimo rappresentabile di 255.
		
		\item F3S6b, F3S7 \emph{(MemWrite)}
		
		Tramite il flag \emph{o\_f3addr\_write} viene assegnato in \emph{o\_data} il valore finale del registro \emph{F3R6} in uscita al mutex.
		
		\item F3S7b, F3S8 \emph{(Current\_Pixel\_Increment)}
		
		Il valore di \emph{F3R7} viene incrementato di uno, questo registro serve alla macchina per sapere il valore corrente di memoria. Viene usato nel processo di gestione della RAM sia per la lettura che per la scrittura dei valori e viene inoltre usato per la condizione d'uscita del ciclo di stati \emph{F1S0b} \textrightarrow  \emph{F3S8} insieme a \emph{max address}.		
		
		\item F3S9 \emph{(Finalize)}
		
		Stato finale della macchina, viene portato a 1 il segnale \emph{done3}
		
		\end {itemize}
 \end{enumerate}
%\break
\begin{tikzpicture}
[->,align=center,node distance=1.2cm]
\node[state, initial, initial text=i\_start] (s0) {$S0$};
\node[state, right of=s0, node distance=2cm] (s0b) {$S0b$};
\node[state, right of=s0b] (s0c) {$S0c$};
\node[state, right of=s0c] (s1) {$S1$};
\node[state, right of=s1] (s2) {$S2$};
\node[state, right of=s2] (s3) {$S3$};
\node[state, right of=s3] (s4) {$S4$};
\node[state, below of=s4, node distance=2cm] (s5) {$S5$};
\node[state, left of=s5] (s6) {$S6$};
\node[state, left of=s6] (s6b) {$S6b$};
\node[state, left of=s6b] (s7) {$S7$};
\node[state, left of=s7] (s7b) {$S7b$};
\node[state, left of=s7b] (s8) {$S8$};
\node[state, left of=s8, node distance=3cm] (s9) {$S9$};
\draw   
	(s0) edge[loop above] node{!start3} (s0)
	(s0) edge[above] node{start3} (s0b)
	(s0b) edge[above] node{} (s0c)
	(s0c) edge[above] node{} (s1)
	(s1) edge[above] node{} (s2)
	(s2) edge[above] node{} (s3)
	(s3) edge[above] node{} (s4)
	(s4) edge[above] node{} (s5)
	(s5) edge[above] node{} (s6)
	(s6) edge[above] node{} (s6b)
	(s6b) edge[above] node{} (s7)
	(s7) edge[above] node{} (s7b)
	(s7b) edge[above] node{} (s8)
	(s8) edge[above] node{end of image} (s9)
	(s8) edge[above] node{\(curAddr < maxAddr\) } (s0b)
	(s9) edge[above] node{} (s0);
	%(s0b) edge[loop above] node{} (s0b);
	%(s0b) edge[bend left, above] node{} (s0c)
	%(s0c) edge[bend left, below] node{} (s0b);
\end{tikzpicture}

\break
%
%{\scalefont{0.6} \begin{center}
%
FSM GENERALE:
	%\begin{tikzpicture}
	%[->,align=center,node distance=2.2cm, text width=13mm, ]
		%\node[state] (F3S1) {$MemLoad$};
		%\node[state, above of = F3S1] (F3S0) {$Ready$};
		%\node[state, below of=F3S1] (F3S2) {$Get\_Val$};
		%\node[state, below of=F3S2] (F3S3) {$Zeroing$};
		%\node[state, below of=F3S3] (F3S4) {$Shift$};
		%\node[state, below of=F3S4] (F3S5) {$Overflow$};
		%\node[state, below of=F3S5] (F3S6) {$MemWrite$};
		%\node[state, below of=F3S6] (F3S7) {$Pixel\_Inc$};
	  %\node[state, left of = F3S1, node distance=4cm] (F2S0) {$Ready$};
		%\node[state, below of=F2S0] (F2S1) {$Get\_Delta$};
		%\node[state, below of=F2S1] (F2S2) {$LUT$};
		%\node[state, below of=F2S2] (F2S3) {$Start3$};
		%\node[state, below of=F2S3] (F2S4) {$WaitDone3$};
		%\node[state, below of=F2S4] (F2S5) {$Finalize$};
    %\node[state, left of=F2S1,initial,initial where=left, initial text=$rst$, node distance=4cm] (F1S0) {$Ready$};
    %\node[state, below of=F1S0] (F1S1) {$Get\_OPs$};
    %\node[state, below of=F1S1] (F1S2) {$Multiply$};
    %\node[state, below of=F1S2, text width=1cm] (F1S3) {$Delta$};
    %\node[state, below of=F1S3, minimum size=1cm] (F1S4) {$Finalize$};
    %\node[state, below of=F1S4, minimum size=1cm] (F1S5) {$Reset$};
      %\draw   (F1S0) edge[below] node{start} (F1S1)
			%\draw   (F2S1) edge[below] node{} (F2S2);
       %
%\end{tikzpicture} \end{center}  }
%\break
\section{Risultati sperimentali}
\section{Simulazioni}
\label{main-text}

Risultati  dei  test  fatti  e  le ragioni di tali test -motivare le scelte
\begin{itemize}
\item TB Delta=255:

 input=[2,3,255,0,1,1,0,255]
 output=[255,0,1,1,0,255].    
    
   Il delta sarà massimo nel momento in cui \(MAXPixel = 255\) e \(MINPixel = 0\). Il valore del logaritmo è quindi massimo e lo \(shiftlevel=0\) (caso minimo) che porterà quindi ad avere in output gli stessi valori di input.
\item TB tutti 0 e tutti 255 \(Delta=0\):

 input=[2,3,0,0,0,0,0,0] 
 output=[0,0,0,0,0,0]
 
  input=[2,3,255,255,255,255,255,255] 
 output=[0,0,0,0,0,0]
 
 Il delta sarà nullo nel momento in cui tutti i valori dell'immagine saranno uguali. Sarà infatti MAXPixel=MINPixel, generando così uno \(shiftlevel=8\) (caso massimo) che porterà quindi ad avere in output solo valori nulli. Questo è anche intuitivamente immaginabile con una monocromia dell'immagine che quindi viene riportata al valore di default.
 \item TB con Shift massimo:
 
 input=[2,3,128,128,128,128,128,128] 
 output=[0,0,0,0,0,0]

Lo Shift sinistro di n posizioni equivale a moltiplicare \(Value*2^{n}\). Un caso importante da considerare è quando il valore di \(n=8\) : il valore di \(Current Pixel-MINPixel\) verrà quindi completamente portato a sinistra lasciando tutti zeri, rispetto alla rappresentazione di 8 bit del pixel. Questo è uno dei valori per cui \(Temp Pixel>255\) e si avrà quindi un output di valori massimi.
\item TB con Massimo e Minimo agli estremi di lettura : 
 
 input=[2,3,255,132,254,2,2,1] 
 output=[255,255,255,2,2,0]
 
 Potrebbe capitare la lettura non completa dell'input. Caso molto comune nei due estremi RAM(3) e RAM(\(COL*RIG+2\)), a volte non compresi nella ricerca del minimo e del massimo.
 
 \item TB con caso limite per LUT: 
 
  input=[2,3,200,199,170,177,180,171] 
 output=[255,2552,0,112,160,16]
 \newline
 Delta=30 Shift=4
  \newline
 input=[2,3,201,199,170,177,180,171] 
 output=[248,232,0,56,80,8]
  \newline
 Delta=31 Shift=3
  \newline
  Bisogna considerare che \(log (delta +1)\) risulta caso limite nel momento in cui il valore di delta assume valore \(2^{n}-1\) (con \(0<=n<=8\)). La LUT dell'implementazione, tiene già conto dell'argomento del logaritmo, cambiando quindi il valore ogni volta che viene raggiunto dal delta una potenza di \(2^{n}-1\).  
\end{itemize}
\section{Risultati di sintesi}
Ecco i vari risultati della sintesi, ottenuti attraverso la Simulazione in ambiente Vivado. 
Sotto viene evidenziato il modo in cui lavorano i vari segnali a cascata per passare tra i vari moduli.
\newline
\begin{figure}[h]
\centering
\includegraphics[width=0.75\textwidth]{Wave.png}
\caption{Waveform della simulazione}
\end{figure}
\break
Ed ecco invece i tempi riscontrati della simulazione con il nostro TB.
\newline
\begin{figure}[h]
\centering
\includegraphics[width=0.7\textwidth]{Time.png}
\caption{Tempi della simulazione}
\end{figure}
\break
\section{Conclusioni}
Entrambi abbiamo creato le basi per capire le dinamiche di approccio ad un progetto: come svilupparlo, ma soprattutto come collaborare. Ringraziamo infine i professori per averci guidato in questa stimolante esperienza.
\end{document}